# Generated by Django 4.0.3 on 2022-04-09 04:12

from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(blank=True, null=True, unique=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('downloaded_at', models.DateField(blank=True, null=True)),
                ('date_published', models.DateField(blank=True, null=True)),
                ('date_published_checked', models.DateTimeField(blank=True, null=True)),
                ('publishing_frequency', models.CharField(blank=True, choices=[('O', 'Once'), ('Y', 'Yearly'), ('Q', 'Quarterly'), ('M', 'Monthly'), ('W', 'Weekly'), ('D', 'Daily')], max_length=1)),
                ('publishing_frequency_checked', models.DateTimeField(blank=True, null=True)),
                ('scan_color', models.CharField(blank=True, choices=[('COL', 'Color'), ('BIT', 'Bitonal'), ('GRA', 'Grayscale')], max_length=3)),
                ('scan_color_checked', models.DateTimeField(blank=True, null=True)),
                ('title_page_checked', models.DateTimeField(blank=True, null=True)),
                ('copyright_page_checked', models.DateTimeField(blank=True, null=True)),
                ('has_vector_text', models.BooleanField(null=True)),
                ('has_vector_text_checked', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('title_checked', models.DateTimeField(blank=True, null=True)),
                ('subtitle', models.TextField(blank=True)),
                ('subtitle_checked', models.DateTimeField(blank=True, null=True)),
                ('edition_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('edition_number_checked', models.DateTimeField(blank=True, null=True)),
                ('volume_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('volume_number_checked', models.DateTimeField(blank=True, null=True)),
                ('volume_number_kind', models.CharField(blank=True, choices=[('1', 'Arabic'), ('I', 'Roman Upper'), ('i', 'Roman Lower'), ('A', 'Letter Upper'), ('a', 'Letter Lower')], max_length=1)),
                ('volume_number_kind_checked', models.DateTimeField(blank=True, null=True)),
                ('issue_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('issue_number_checked', models.DateTimeField(blank=True, null=True)),
                ('issue_number_kind', models.CharField(blank=True, choices=[('1', 'Arabic'), ('I', 'Roman Upper'), ('i', 'Roman Lower'), ('A', 'Letter Upper'), ('a', 'Letter Lower')], max_length=1)),
                ('issue_number_kind_checked', models.DateTimeField(blank=True, null=True)),
                ('printing_number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('printing_number_checked', models.DateTimeField(blank=True, null=True)),
                ('numbers_offset', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('numbers_offset_checked', models.DateTimeField(blank=True, null=True)),
                ('roman_numbers_offset', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('roman_numbers_offset_checked', models.DateTimeField(blank=True, null=True)),
                ('in_copyright', models.BooleanField(blank=True, null=True)),
                ('in_copyright_checked', models.DateTimeField(blank=True, null=True)),
                ('has_ligatures', models.BooleanField(blank=True, null=True)),
                ('has_ligatures_checked', models.DateTimeField(blank=True, null=True)),
                ('cities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None)),
                ('cities_checked', models.DateTimeField(blank=True, null=True)),
                ('topics_checked', models.DateTimeField(blank=True, null=True)),
                ('contributions_checked', models.DateTimeField(blank=True, null=True)),
                ('printers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None)),
                ('printers_checked', models.DateTimeField(blank=True, null=True)),
                ('publishers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None)),
                ('publishers_checked', models.DateTimeField(blank=True, null=True)),
                ('copyright_years', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, null=True, size=None)),
                ('copyright_years_checked', models.DateTimeField(blank=True, null=True)),
                ('sections_checked', models.DateTimeField(blank=True, null=True)),
                ('graphics_checked', models.DateTimeField(blank=True, null=True)),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('hidden', models.BooleanField(blank=True, default=False)),
                ('other_languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None)),
                ('other_languages_checked', models.DateTimeField(blank=True, null=True)),
                ('series_name', models.CharField(blank=True, max_length=63, null=True)),
                ('number_in_series', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_in_series_kind', models.CharField(blank=True, choices=[('1', 'Arabic'), ('I', 'Roman Upper'), ('i', 'Roman Lower'), ('A', 'Letter Upper'), ('a', 'Letter Lower')], max_length=1)),
                ('series_checked', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'get_latest_by': 'date_published',
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('original_text', models.CharField(blank=True, editable=False, max_length=32)),
                ('text', models.CharField(blank=True, max_length=32)),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'Page'), (2, 'Block'), (3, 'Paragraph'), (4, 'Line'), (5, 'Word')])),
                ('page_number', models.PositiveSmallIntegerField()),
                ('block_number', models.PositiveSmallIntegerField()),
                ('paragraph_number', models.PositiveSmallIntegerField()),
                ('line_number', models.PositiveSmallIntegerField()),
                ('word_number', models.PositiveSmallIntegerField()),
                ('left', models.PositiveSmallIntegerField()),
                ('top', models.PositiveSmallIntegerField()),
                ('width', models.PositiveSmallIntegerField()),
                ('height', models.PositiveSmallIntegerField()),
                ('original_confidence', models.FloatField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name_plural': 'boxes',
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('AUT', 'Author'), ('EDI', 'Editor'), ('TRA', 'Translator')], max_length=3)),
                ('rank', models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Graphic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('medium', models.CharField(blank=True, choices=[('ENG', 'Engraved Plate'), ('ETC', 'Etching'), ('WOO', 'Woodcut'), ('LIT', 'Lithograph'), ('MEZ', 'Mezzotint'), ('AQU', 'Aquatint')], max_length=3)),
                ('medium_checked', models.DateTimeField(blank=True, null=True)),
                ('content', models.CharField(blank=True, choices=[('PHO', 'Photograph'), ('MAP', 'Map'), ('CHA', 'Chart'), ('DIA', 'Diagram'), ('ILL', 'Illustration'), ('TEC', 'Technical Drawing'), ('DRA', 'Drawing'), ('DEC', 'Decoration'), ('EQU', 'Equation'), ('MUS', 'Music Notation')], max_length=3)),
                ('content_checked', models.DateTimeField(blank=True, null=True)),
                ('print_color', models.CharField(blank=True, choices=[('COL', 'Color'), ('BIT', 'Bitonal'), ('GRA', 'Grayscale')], max_length=3)),
                ('print_color_checked', models.DateTimeField(blank=True, null=True)),
                ('pages_checked', models.DateTimeField(blank=True, null=True)),
                ('caption', models.TextField(blank=True)),
                ('caption_checked', models.DateTimeField(blank=True, null=True)),
                ('left', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('top', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('width', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('height', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('caption_left', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('caption_top', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('caption_width', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('caption_height', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('box_checked', models.DateTimeField(blank=True, null=True)),
                ('caption_box_checked', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('original_image', models.ImageField(unique=True, upload_to='')),
                ('jpg_image', models.ImageField(unique=True, upload_to='')),
                ('text', models.TextField(blank=True, null=True)),
                ('text_generated_at', models.DateTimeField(blank=True, null=True)),
                ('kinds', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('BLA', 'Blank'), ('TIT', 'Title'), ('PUB', 'Publishing Info'), ('PRI', 'Printing Info'), ('HAT', 'Half Title'), ('FCO', 'Front Cover'), ('BCO', 'Back Cover'), ('FJA', 'Front Jacket'), ('BJA', 'Back Jacket'), ('FJF', 'Front Jacket Flap'), ('BJF', 'Back Jacket Flap'), ('DEC', 'Decorative Paper'), ('FAD', 'Full Ad'), ('PAD', 'Partial Ad'), ('EQS', 'Equations'), ('GRA', 'Graphics')], max_length=3), blank=True, null=True, size=None)),
                ('image_problems', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('DBA', 'Dark Background'), ('ROT', 'Rotation'), ('DOU', 'Double Page'), ('WAT', 'Watermark')], max_length=3), blank=True, null=True, size=None)),
                ('text_direction', models.CharField(blank=True, choices=[('L', 'Left'), ('R', 'Right')], max_length=1, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='lsma.book')),
                ('graphics', models.ManyToManyField(blank=True, to='lsma.graphic')),
            ],
            options={
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tn_ancestors_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Ancestors pks')),
                ('tn_ancestors_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Ancestors count')),
                ('tn_children_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Children pks')),
                ('tn_children_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Children count')),
                ('tn_depth', models.PositiveIntegerField(default=0, editable=False, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Depth')),
                ('tn_descendants_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Descendants pks')),
                ('tn_descendants_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Descendants count')),
                ('tn_index', models.PositiveIntegerField(default=0, editable=False, verbose_name='Index')),
                ('tn_level', models.PositiveIntegerField(default=1, editable=False, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Level')),
                ('tn_priority', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Priority')),
                ('tn_order', models.PositiveIntegerField(default=0, editable=False, verbose_name='Order')),
                ('tn_siblings_pks', models.TextField(blank=True, default='', editable=False, verbose_name='Siblings pks')),
                ('tn_siblings_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Siblings count')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=31, unique=True)),
                ('tn_parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tn_children', to='lsma.topic', verbose_name='Parent')),
            ],
            options={
                'ordering': ['tn_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('pages_checked', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=63, null=True)),
                ('title_checked', models.DateTimeField(blank=True, null=True)),
                ('number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_checked', models.DateTimeField(blank=True, null=True)),
                ('number_kind', models.CharField(blank=True, choices=[('1', 'Arabic'), ('I', 'Roman Upper'), ('i', 'Roman Lower'), ('A', 'Letter Upper'), ('a', 'Letter Lower')], max_length=1)),
                ('number_kind_checked', models.DateTimeField(blank=True, null=True)),
                ('inputs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=63), blank=True, null=True, size=None)),
                ('inputs_checked', models.DateTimeField(blank=True, null=True)),
                ('outputs', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=63), blank=True, null=True, size=None)),
                ('outputs_checked', models.DateTimeField(blank=True, null=True)),
                ('topics_checked', models.DateTimeField(blank=True, null=True)),
                ('heading_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsma.page')),
                ('pages', models.ManyToManyField(related_name='tables', to='lsma.page')),
                ('topics', models.ManyToManyField(to='lsma.topic')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('kind', models.CharField(blank=True, choices=[('CHG', 'Chapter'), ('CHA', 'Chapter Group'), ('PRE', 'Preface'), ('INT', 'Introduction'), ('DED', 'Dedication'), ('ACK', 'Acknowledgements'), ('TOC', 'Table Of Contents'), ('BIB', 'Bibliography'), ('GLO', 'Glossary'), ('APS', 'Appendices'), ('APP', 'Appendix'), ('IND', 'Index'), ('CAT', 'Publishers Catalog'), ('TAS', 'Tables'), ('ART', 'Article'), ('FIG', 'Figure'), ('PLA', 'Plates')], max_length=3)),
                ('kind_checked', models.DateTimeField(blank=True, null=True)),
                ('kind_in_book', models.CharField(blank=True, max_length=15)),
                ('kind_in_book_checked', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('title_checked', models.DateTimeField(blank=True, null=True)),
                ('number', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_checked', models.DateTimeField(blank=True, null=True)),
                ('number_kind', models.CharField(blank=True, choices=[('1', 'Arabic'), ('I', 'Roman Upper'), ('i', 'Roman Lower'), ('A', 'Letter Upper'), ('a', 'Letter Lower')], max_length=1)),
                ('number_kind_checked', models.DateTimeField(blank=True, null=True)),
                ('for_edition', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('for_edition_checked', models.DateTimeField(blank=True, null=True)),
                ('first_page_checked', models.DateTimeField(blank=True, null=True)),
                ('last_page_checked', models.DateTimeField(blank=True, null=True)),
                ('topics_checked', models.DateTimeField(blank=True, null=True)),
                ('contributions_checked', models.DateTimeField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='lsma.book')),
                ('contributions', models.ManyToManyField(blank=True, to='lsma.contribution')),
                ('heading_page', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='section_headings', to='lsma.page')),
                ('pages', models.ManyToManyField(blank=True, to='lsma.page')),
                ('topics', models.ManyToManyField(blank=True, to='lsma.topic')),
            ],
            options={
                'ordering': ['heading_page'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('family_name', models.CharField(max_length=31)),
                ('given_names', models.CharField(blank=True, max_length=31)),
            ],
            options={
                'unique_together': {('family_name', 'given_names')},
            },
        ),
        migrations.AddField(
            model_name='page',
            name='topics',
            field=models.ManyToManyField(blank=True, to='lsma.topic'),
        ),
        migrations.CreateModel(
            name='OcrFix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_accuracy', models.FloatField()),
                ('old_value', models.CharField(max_length=31, null=True)),
                ('new_value', models.CharField(max_length=31, null=True)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('decided_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ocr_fixes', to=settings.AUTH_USER_MODEL)),
                ('word', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ocr_fixes', to='lsma.box')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='graphic',
            name='artists',
            field=models.ManyToManyField(to='lsma.person'),
        ),
        migrations.AddField(
            model_name='graphic',
            name='book',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphics', to='lsma.book'),
        ),
        migrations.AddField(
            model_name='contribution',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='lsma.person'),
        ),
        migrations.AddField(
            model_name='box',
            name='page',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='lsma.page'),
        ),
        migrations.AddField(
            model_name='book',
            name='contributions',
            field=models.ManyToManyField(blank=True, to='lsma.contribution'),
        ),
        migrations.AddField(
            model_name='book',
            name='copyright_page',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='copyright_page_for', to='lsma.page'),
        ),
        migrations.AddField(
            model_name='book',
            name='title_page',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='title_page_for', to='lsma.page'),
        ),
        migrations.AddField(
            model_name='book',
            name='topics',
            field=models.ManyToManyField(blank=True, to='lsma.topic'),
        ),
    ]
